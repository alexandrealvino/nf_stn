// Code generated by MockGen. DO NOT EDIT.
// Source: authentication.go

// Package mock is a generated GoMock package.
package mock

import (
	jwt "github.com/dgrijalva/jwt-go"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	entities "nf_stn/entities"
	reflect "reflect"
)

// MockToken is a mock of Token interface
type MockToken struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMockRecorder
}

// MockTokenMockRecorder is the mock recorder for MockToken
type MockTokenMockRecorder struct {
	mock *MockToken
}

// NewMockToken creates a new mock instance
func NewMockToken(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockToken) EXPECT() *MockTokenMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockToken) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init
func (mr *MockTokenMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockToken)(nil).Init))
}

// ExtractToken mocks base method
func (m *MockToken) ExtractToken(r *http.Request) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToken", r)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractToken indicates an expected call of ExtractToken
func (mr *MockTokenMockRecorder) ExtractToken(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToken", reflect.TypeOf((*MockToken)(nil).ExtractToken), r)
}

// VerifyToken mocks base method
func (m *MockToken) VerifyToken(r *http.Request) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", r)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken
func (mr *MockTokenMockRecorder) VerifyToken(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockToken)(nil).VerifyToken), r)
}

// TokenValid mocks base method
func (m *MockToken) TokenValid(r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenValid", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// TokenValid indicates an expected call of TokenValid
func (mr *MockTokenMockRecorder) TokenValid(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenValid", reflect.TypeOf((*MockToken)(nil).TokenValid), r)
}

// ExtractTokenMetadata mocks base method
func (m *MockToken) ExtractTokenMetadata(r *http.Request) (*entities.AccessDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTokenMetadata", r)
	ret0, _ := ret[0].(*entities.AccessDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractTokenMetadata indicates an expected call of ExtractTokenMetadata
func (mr *MockTokenMockRecorder) ExtractTokenMetadata(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTokenMetadata", reflect.TypeOf((*MockToken)(nil).ExtractTokenMetadata), r)
}

// Logout mocks base method
func (m *MockToken) Logout(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", w, r)
}

// Logout indicates an expected call of Logout
func (mr *MockTokenMockRecorder) Logout(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockToken)(nil).Logout), w, r)
}

// FetchAuth mocks base method
func (m *MockToken) FetchAuth(authD *entities.AccessDetails) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAuth", authD)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuth indicates an expected call of FetchAuth
func (mr *MockTokenMockRecorder) FetchAuth(authD interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuth", reflect.TypeOf((*MockToken)(nil).FetchAuth), authD)
}

// CreateToken mocks base method
func (m *MockToken) CreateToken(userid uint64, username string) (*entities.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userid, username)
	ret0, _ := ret[0].(*entities.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken
func (mr *MockTokenMockRecorder) CreateToken(userid, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockToken)(nil).CreateToken), userid, username)
}

// CreateAuth mocks base method
func (m *MockToken) CreateAuth(userID uint64, td *entities.TokenDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuth", userID, td)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuth indicates an expected call of CreateAuth
func (mr *MockTokenMockRecorder) CreateAuth(userID, td interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuth", reflect.TypeOf((*MockToken)(nil).CreateAuth), userID, td)
}

// DeleteAuth mocks base method
func (m *MockToken) DeleteAuth(givenUUID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuth", givenUUID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuth indicates an expected call of DeleteAuth
func (mr *MockTokenMockRecorder) DeleteAuth(givenUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuth", reflect.TypeOf((*MockToken)(nil).DeleteAuth), givenUUID)
}
// NewMockDbClient mocks
func NewMockDbClient(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}
//
// Code generated by MockGen. DO NOT EDIT.
// Source: db_queries.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	entities "nf_stn/entities"
	reflect "reflect"
)

// MockDataBase is a mock of DataBase interface
type MockDataBase struct {
	ctrl     *gomock.Controller
	recorder *MockDataBaseMockRecorder
}

// MockDataBaseMockRecorder is the mock recorder for MockDataBase
type MockDataBaseMockRecorder struct {
	mock *MockDataBase
}

// NewMockDataBase creates a new mock instance
func NewMockDataBase(ctrl *gomock.Controller) *MockDataBase {
	mock := &MockDataBase{ctrl: ctrl}
	mock.recorder = &MockDataBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataBase) EXPECT() *MockDataBaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockDataBase) Init() {
	m.ctrl.T.Helper()
	//ret := m.ctrl.Call(m, "GetAll")
	//ret0, _ := ret[0].([]entities.Invoice)
	//ret1, _ := ret[1].(error)
	return
}

// GetAll mocks base method
func (m *MockDataBase) GetAll() ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockDataBaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDataBase)(nil).GetAll))
}

// GetInvoiceByDocument mocks base method
func (m *MockDataBase) GetInvoiceByDocument(document string) (entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByDocument", document)
	ret0, _ := ret[0].(entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByDocument indicates an expected call of GetInvoiceByDocument
func (mr *MockDataBaseMockRecorder) GetInvoiceByDocument(document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByDocument", reflect.TypeOf((*MockDataBase)(nil).GetInvoiceByDocument), document)
}

// GetAccountByProfile mocks base method
func (m *MockDataBase) GetAccountByProfile(profile string) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByProfile", profile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccountByProfile indicates an expected call of GetAccountByProfile
func (mr *MockDataBaseMockRecorder) GetAccountByProfile(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByProfile", reflect.TypeOf((*MockDataBase)(nil).GetAccountByProfile), profile)
}

// GetInvoiceByID mocks base method
func (m *MockDataBase) GetInvoiceByID(id int) (entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByID", id)
	ret0, _ := ret[0].(entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByID indicates an expected call of GetInvoiceByID
func (mr *MockDataBaseMockRecorder) GetInvoiceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByID", reflect.TypeOf((*MockDataBase)(nil).GetInvoiceByID), id)
}

// InsertInvoice mocks base method
func (m *MockDataBase) InsertInvoice(invoice entities.Invoice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInvoice", invoice)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInvoice indicates an expected call of InsertInvoice
func (mr *MockDataBaseMockRecorder) InsertInvoice(invoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInvoice", reflect.TypeOf((*MockDataBase)(nil).InsertInvoice), invoice)
}

// DeleteInvoice mocks base method
func (m *MockDataBase) DeleteInvoice(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoice", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoice indicates an expected call of DeleteInvoice
func (mr *MockDataBaseMockRecorder) DeleteInvoice(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoice", reflect.TypeOf((*MockDataBase)(nil).DeleteInvoice), id)
}

// UpdateInvoice mocks base method
func (m *MockDataBase) UpdateInvoice(invoice entities.Invoice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoice", invoice)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvoice indicates an expected call of UpdateInvoice
func (mr *MockDataBaseMockRecorder) UpdateInvoice(invoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoice", reflect.TypeOf((*MockDataBase)(nil).UpdateInvoice), invoice)
}

// PatchInvoice mocks base method
func (m *MockDataBase) PatchInvoice(invoice entities.Invoice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInvoice", invoice)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInvoice indicates an expected call of PatchInvoice
func (mr *MockDataBaseMockRecorder) PatchInvoice(invoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInvoice", reflect.TypeOf((*MockDataBase)(nil).PatchInvoice), invoice)
}

// InvoiceExists mocks base method
func (m *MockDataBase) InvoiceExists(document string) (entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvoiceExists", document)
	ret0, _ := ret[0].(entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvoiceExists indicates an expected call of InvoiceExists
func (mr *MockDataBaseMockRecorder) InvoiceExists(document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvoiceExists", reflect.TypeOf((*MockDataBase)(nil).InvoiceExists), document)
}

// ClearTable mocks base method
func (m *MockDataBase) ClearTable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearTable")
}

// ClearTable indicates an expected call of ClearTable
func (mr *MockDataBaseMockRecorder) ClearTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearTable", reflect.TypeOf((*MockDataBase)(nil).ClearTable))
}

// Pagination mocks base method
func (m *MockDataBase) Pagination(int) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pagination")
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pagination indicates an expected call of Pagination
func (mr *MockDataBaseMockRecorder) Pagination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pagination", reflect.TypeOf((*MockDataBase)(nil).Pagination))
}

func NewMockDbClient(ctrl *gomock.Controller) *MockDataBase {
	mock := &MockDataBase{ctrl: ctrl}
	mock.recorder = &MockDataBaseMockRecorder{mock}
	return mock
}